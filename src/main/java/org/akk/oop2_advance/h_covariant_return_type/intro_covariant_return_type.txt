🧠 1. What Are Covariant Return Types?
------------------------------------------
In Java, Covariant Return Types allow an overriding method in a subclass to return a more specific type than the method it overrides in the superclass.
🔹 Meaning:
    - If superclass method returns a type A,
    - then the subclass’s overridden method can return a subclass of A.

🔸 Before Java 5 (old rule)
    The overriding method must return exactly the same type as the superclass method.

🔸 After Java 5 (new rule)
    The overriding method can return a subclass type of the original return type — this is called a covariant return type.




🔹 2. Why Was This Feature Introduced?
------------------------------------------
Because it increases type safety and reduces the need for casting.
Let’s look at an example.



How It Works Internally (Compiler Rules)
------------------------------------------------
Java allows this because:
    - Return type compatibility is checked at compile time.
    - The JVM still treats both methods as having the same signature except for the return type — but Java’s type system ensures safety.
    - Covariant return types rely on method signature compatibility in bytecode (return types don’t affect overriding rules at runtime).


Real-World Analogy
----------------------------
    Imagine:
        - A factory (Animal) that produces Animal objects.
        - A Dog factory (subclass) that produces only Dog objects.
    - Without covariance → all factories can only say: “I produce Animals.”
    - With covariance → each factory can say: “I produce Dogs,” “I produce Cats,” etc. — more precise!



JVM Level (Advanced Insight)
-------------------------------------
At the JVM level, method overriding uses only:
    - Method name
    - Parameter types

Return type is not part of the method signature, so covariant return types don’t break compatibility with old code.
The compiler just inserts a bridge method if needed to ensure backward compatibility in bytecode.