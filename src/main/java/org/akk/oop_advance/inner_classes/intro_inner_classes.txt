🔑 What are Inner Classes in Java?
------------------------------------------
An inner class is a class defined inside another class.
👉 It is logically grouped with its outer class.
👉 Used to bind the two together, increase encapsulation, and make code more readable.



🏗️ Types of Inner Classes
---------------------------
1. Member Inner Class
    - Defined inside a class but outside any method.
    - Has access to all members (including private) of the outer class.
✅ Used when inner class is closely related to outer class functionality.





2. Static Nested Class
--------------------------------------
    - Declared with static keyword.
    - Cannot access instance members of the outer class directly.
    - Can only access static members of the outer class.

✅ Often used as helper classes (like Map.Entry inside Map).





3. Local Inner Class
-------------------------------------------
    - Declared inside a method, constructor, or block.
    - Can access final or effectively final variables of the enclosing scope.
✅ Useful for method-specific logic.


4 Anonymous Inner Class
---------------------------
    - A class without a name, defined and instantiated in a single statement.
    - Usually used to implement interfaces or extend abstract classes inline.
✅ Anonymous inner class lets us quickly create one-off implementations.





⚖️ Differences Between Inner Classes
===========================================
Type	                Scope & Use Case
---------------------------------------------------------------------------------
Member Inner Class	    Associated with object, full access to outer instance
Static Nested Class	    Independent of object, only accesses static members
Local Inner Class	    Inside a method/block, limited scope
Anonymous Class	        No name, inline implementation of interface/abstract class




🎯 Advantages of Inner & Anonymous Classes
--------------------------------------------------------
✅ Helps in grouping logically related classes.
✅ Can access outer class members, increasing encapsulation.
✅ Anonymous classes reduce boilerplate code (especially with interfaces).
✅ Often used in event handling (like Swing, Android, etc.).




⚠️ Limitations
===========================
❌ Can make code harder to read if overused.
❌ Anonymous classes are single-use (no reuse).
❌ Local inner classes can only access effectively final variables.








